#!/usr/bin/env python

from ostools import *
import argparse
import json
import sys

openstack = OSTools('ostools.cfg')


def get_args():
    """Get command-line options"""
    parser = argparse.ArgumentParser(prog="project_info",
                description="Lookup project specific information",
                epilog="")
    parser.add_argument("-p", "--project_id",
                        help="The project/tenant ID.")
    parser.add_argument("-n", "--name",
                        help="The project name")
    parser.add_argument("-u", "--users",
                        help="List project members.",
                        action="store_true")
    parser.add_argument("-f", "--floatingips",
                        help="List allocated floating IP's",
                        action="store_true")
    parser.add_argument("-s", "--secgroups",
                        help="List security groups & rules",
                        action="store_true")
    parser.add_argument("-q", "--quotas",
                        help="List quotas",
                        action="store_true")
    parser.add_argument("-v", "--vms",
                        help="List virtual machines",
                        action="store_true")

    args = parser.parse_args()

    if args.project_id and args.name:
        print("Please select ONE search parameter!")
        parser.print_help()
        sys.exit(1)
    if not args.project_id and not args.name:
        print("You must select a search parameter!")
        parser.print_help()
        sys.exit(1)

    return args


def main():
    args = get_args()

    if args.project_id:
        projectinfo = openstack.project_info('id', args.project_id)
    elif args.name:
        projectinfo = openstack.project_info('name', args.name)

    if not projectinfo:
        print("No projects found!")
        sys.exit(1)
    else:
        print
        print("Project: %s" % projectinfo['name'])
        print("     ID: %s" % projectinfo['id'])
        print("  Descr: %s" % projectinfo['description'])
        print("Enabled: %s" % bool(projectinfo['enabled']))
        print

        if args.users:
            print("%s[ Users ]%s" % (red, nrm))
            userlist = openstack.project_members(projectinfo['id'])
            print("%s%-33s %-20s %-32s %-32s%s" %
                 (bld, "USER ID", "NAME", "EMAIL", "DEFAULT TENANT", nrm))

            for user in userlist:
                extra = json.loads(user['extra'])
                print("%-33s %-20s %-32s %-32s" % (user['id'],
                                                   user['name'][:20],
                                                   extra['email'][:32],
                                                   extra['tenantId']))
            print

        if args.floatingips:
            print("%s[ Floating IP's ]%s" % (red, nrm))
            floatinglist = openstack.floatingips(projectinfo['id'])
            if not floatinglist:
                print("No Floating IP's")
                print
            else:
                print("%s%-18s %-38s %-32s%s" %
                     (bld, "IP ADDRESS", "VM UUID", "HOSTNAME", nrm))

                for ip in floatinglist:
                    vm_uuid = openstack.uuid_by_floating_ip(ip['floating_ip_address'])

                    if vm_uuid:
                        vminfo = openstack.vm_info('uuid', vm_uuid['uuid'])
                        uuid = vm_uuid['uuid']
                        name = vminfo['hostname']
                    else:
                        uuid = "--"
                        name = "--"

                    print("%-18s %-38s %-32s" %
                         (ip['floating_ip_address'], uuid, name))
            print

        if args.secgroups:
            print("%s[ Security Groups ]%s" % (red, nrm))
            secgroups = openstack.secgroups_by_project_id(projectinfo['id'])
            if not secgroups:
                print("No Security Groups")
                print
            else:
                for group in secgroups:
                    print("%s [%s]" % (group['id'], group['name']))
                    print(":: %s" % group['description'])
                    sg_rules = openstack.secgroup_rules(group['id'])
                    if not sg_rules:
                        print("No Security Group Rules")
                    else:
                        print("%s    %-6s %-7s %-7s %-20s %s%s" %
                            (bld, "PROT", "MIN", "MAX", "CIDR", "ID", nrm))
                        for rule in sg_rules:
                            print("    %-6s %-7s %-7s %-20s %s" % (rule['protocol'],
                                                                   rule['port_range_min'],
                                                                   rule['port_range_max'],
                                                                   rule['remote_ip_prefix'],
                                                                   rule['id']))
                    print

        if args.quotas:
            print("%s[ Quotas ]%s" % (red, nrm))
            quota_info = openstack.project_quotas(projectinfo['id'])
            print("%s%-28s %-8s %-8s %-8s %-8s%s" %
                 (bld, "RESOURCE", "QUOTA", "USED", "RSRVD", "ACTUAL", nrm))
            for quota in quota_info:
                flag = ''
                if quota['in_use'] != '--' and \
                   quota['actual'] != '--' and \
                   quota['in_use'] != quota['actual']:
                    flag = red
                print("%s%-28s %-8s %-8s %-8s %-8s%s" % (flag,
                                                         quota['resource'],
                                                         quota['hard_limit'],
                                                         quota['in_use'],
                                                         quota['reserved'],
                                                         quota['actual'],
                                                         nrm))
            print

        if args.vms:
            print("%s[ VM's ]%s" % (red, nrm))
            vmlist = openstack.vm_list('project_id', args.project_id)
            print("%s%-6s %-10s  %-32s  %-36s  %-9s  %s%s" %
                 (bld, "CNODE", "INSTANCE", "PROJECT_ID", "UUID", "STATE", "HOSTNAME", nrm))
            for row in vmlist:
                print("%-6s i-%08x  %-32s  %-36s  %-9s  %s" %
                      (row['host'],
                       row['id'],
                       row['project_id'],
                       row['uuid'],
                       row['vm_state'],
                       row['hostname']))
            print

if __name__ == '__main__':
    main()
