#!/usr/bin/env python

from ostools import *
import argparse
import sys

openstack = OSTools('ostools.cfg')


def get_args():
    """Get command-line options"""
    parser = argparse.ArgumentParser(prog = "vm_info",
                description = "Lookup VM Information",
                epilog = "Use only ONE search parameter [floating_ip|instance|uuid]")
    parser.add_argument("-n", "--network",
                        help = "Include network information",
                        action="store_true")
    parser.add_argument("-v", "--volumes",
                        help = "Include volume information",
                        action="store_true")
    parser.add_argument("-s", "--secgroups",
                        help = "Include security group information",
                        action="store_true")
    parser.add_argument("-f", "--floating_ip")
    parser.add_argument("-i", "--instance")
    parser.add_argument("-u", "--uuid")

    args = parser.parse_args()

    # This section needs some work for 'at least one', but 'only one'
    if not (args.floating_ip or args.uuid or args.instance):
        parser.error("No arguments provided!")
        parser.print_help()
        sys.exit(1)

    return args


def main():
    args = get_args()

    # Get VM Information
    if args.floating_ip:
        uuid = openstack.uuid_by_floating_ip(args.floating_ip)
        vminfo = openstack.vm_info('uuid', uuid['uuid'])
    if args.instance:
        if "instance-" in args.instance or "i-" in args.instance:
            hexval = args.instance[args.instance.index('-') + 1:]  # Strip off "instance-" or "i-"
        else:
            hexval = args.instance
        instid = int(hexval, 16)  # convert hex to dec
        vminfo = openstack.vm_info('instance_id', instid)
    if args.uuid:
        vminfo = openstack.vm_info('uuid', args.uuid)

    # Get ancillary information
    vmports = openstack.vm_ports(vminfo['uuid'])
    userinfo = openstack.user_by_id(vminfo['user_id'])
    projectinfo = openstack.project_by_id(vminfo['project_id'])
    flavorinfo = openstack.flavor_by_id(vminfo['instance_type_id'])
    imagename = openstack.image_name(vminfo['image_ref'])

    # Virtual Machine Section
    print
    print("%s[ Virtual Machine ]%s" % (red, nrm))
    print("Hostname: %s" % vminfo['hostname'])
    print(" Created: %s" % vminfo['created_at'])
    print(" Creator: %s [%s]" % (vminfo['user_id'], userinfo['name']))
    print("  Flavor: %s [cpu:%-2s  ram:%-5s  root:%-3sGB  eph:%-3sGB]" % (flavorinfo['name'],
                                                                          flavorinfo['vcpus'],
                                                                          flavorinfo['memory_mb'],
                                                                          flavorinfo['root_gb'],
                                                                          flavorinfo['ephemeral_gb']))
    print("   Image: %s [%s]" % (vminfo['image_ref'], imagename['name']))
    print(" SSH Key: %s" % vminfo['key_name'])
    print("    UUID: %s" % vminfo['uuid'])
    print("Instance: instance-%08x" % vminfo['id'])
    print(" Project: %s [%s]" % (vminfo['project_id'], projectinfo['name']))
    print(" Compute: %s" % vminfo['host'])
    print("   State: %s" % vminfo['vm_state'])
    print

    # Network Section
    if args.network:
        print("%s[ Networking ]%s" % (red, nrm))
        if not vmports:
            print("No Network")
            print
        else:
            for port in vmports:
                netinfo = openstack.netinfo_by_port_id(port['id'])
                dhcp = openstack.dhcp_ports(netinfo['network_id'])
                router = openstack.router(netinfo['network_id'])
                if router:
                    l3gw = openstack.l3_gw(router['device_id'])
                print(" VM Port: %s [%s] [%s]" % (port['id'], netinfo['mac_address'], netinfo['pt_name']))
                print(" Network: %s [%s]" % (netinfo['network_id'], netinfo['nt_name']))
                print("  Subnet: %s [%s]" % (netinfo['subnet_id'], netinfo['sn_name']))
                for dhcpport in dhcp:
                    print("    DHCP: %s [%s] [%s]" % (dhcpport['id'],dhcpport['mac_address'],dhcpport['status']))
                if router:
                    print("  Router: %s [%s] [%s] [%s]" % (router['device_id'],
                                                           router['mac_address'],
                                                           router['name'],
                                                           router['status']))
                    print("    L3GW: %s" % l3gw['host'])
                print("    CIDR: %s" % netinfo['cidr'])
                print(" Gateway: %s" % netinfo['gateway_ip'])
                print(" Private: %s [exp:%s]" % (netinfo['ip_address'], netinfo['expiration']))
                if router:
                    print("Floating: %s" % netinfo['floating_ip_address'])
                print

    # Volumes Section
    if args.volumes:
        volinfo = openstack.volume_by_uuid(vminfo['uuid'])
        print("%s[ Volumes ]%s" % (red, nrm))
        if not volinfo:
            print("No Volumes")
            print
        else:
            for row in volinfo:
                userinfo = openstack.user_by_id(row['user_id'])
                print("%s [%s]" % (row['id'], row['display_name']))
                print(":: %s" % row['display_description'])
                print(" Created: %s" % row['created_at'])
                print(" Creator: %s [%s]" % (row['user_id'], userinfo['name']))
                print("    Size: %s GB" % row['size'])
                print("Provider: %s" % row['provider_location'])
                print("  Status: %s [%s]" % (row['status'], row['attach_status']))
                print

    # Security Groups Section
    if args.secgroups:
        # Just use the first element of vmports since all are the same
        secgroups = openstack.secgroups_by_port_id(vmports[0]['id'])
        print("%s[ Security Groups ]%s" % (red, nrm))
        if not secgroups:
            print("No Security Groups")
            print
        else:
            for group in secgroups:
                print("%s [%s]" % (group['security_group_id'], group['name']))
                print(":: %s" % group['description'])
                sg_rules = openstack.secgroup_rules(group['security_group_id'])
                print("%s    %-6s %-7s %-7s %-20s %s%s" %
                    (bld, "PROT", "MIN", "MAX", "CIDR", "ID", nrm))
                for rule in sg_rules:
                    print("    %-6s %-7s %-7s %-20s %s" % (rule['protocol'],
                                                           rule['port_range_min'],
                                                           rule['port_range_max'],
                                                           rule['remote_ip_prefix'],
                                                           rule['id']))
            print


if __name__ == '__main__':
    main()
